# GitHub Actions workflow for testing gwArsenicR package
# This workflow tests the package on multiple R versions and operating systems
# to ensure compatibility and reliability across different environments

name: R Package Testing - gwArsenicR

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:  # Skip CI for non-code changes
      - "**.md"
      - "**.txt"
      - "docs/**"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'release'}
          - {os: ubuntu-latest,  r: 'release'}
          - {os: ubuntu-latest,  r: 'devel'}
          - {os: ubuntu-latest,  r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Query R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2  # Enable caching for better performance
          extra-packages: |
            any::rcmdcheck
            any::testthat
            any::devtools
            any::remotes
          needs: check

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install package dependencies
        run: |
          # Install package dependencies
          remotes::install_deps(dependencies = TRUE, upgrade = "always")
          
          # Install additional testing dependencies
          install.packages(c("covr", "spelling"))
        shell: Rscript {0}

      - name: Check package build
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          error-on: '"error"'
          
      - name: Run comprehensive tests
        run: |
          # Set options for better error reporting
          options(warn = 2, error = traceback)
          
          # Load package and run all tests
          devtools::load_all()
          
          # Run tests with better error capture
          tryCatch({
            cat("Running test-gwArsenic.R specifically...\n")
            if (file.exists("tests/testthat/test-gwArsenic.R")) {
              testthat::test_file("tests/testthat/test-gwArsenic.R", reporter = "summary")
              cat("test-gwArsenic.R completed successfully!\n")
            } else {
              cat("Warning: test-gwArsenic.R not found, trying filter approach...\n")
              devtools::test(filter = "gwArsenic", reporter = "summary")
            }
            
            cat("Running full test suite...\n")
            devtools::test(reporter = "summary")
            
            cat("Testing package installation...\n")
            devtools::install(quiet = FALSE)
            library(gwArsenicR)
            
            # Test main function exists
            stopifnot(exists("perform_sensitivity_analysis"))
            cat("All tests completed successfully!\n")
          }, error = function(e) {
            cat("Test failed with error:\n")
            print(e)
            quit(status = 1)
          })
        shell: Rscript {0}

      - name: Test vignette rendering
        run: |
          # Test that vignettes can be built
          if (file.exists("vignettes/gwArsenicR-vignette.Rmd")) {
            cat("Testing vignette rendering...\n")
            tryCatch({
              rmarkdown::render("vignettes/gwArsenicR-vignette.Rmd", 
                              output_dir = tempdir())
              cat("Vignette rendered successfully!\n")
            }, error = function(e) {
              cat("Vignette rendering failed:\n")
              print(e)
              quit(status = 1)
            })
          }
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4  # Updated from v3
        with:
          name: check-results-${{ matrix.config.os }}-r${{ matrix.config.r }}
          path: check

      - name: Show session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

  # Enhanced coverage job with quality gates
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch
    
    permissions:
      contents: write  # Add write permission for committing badge updates
      pull-requests: write
      
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::covr
            any::testthat
            any::devtools
            any::DT
            any::htmltools
          needs: coverage

      - name: Test coverage
        run: |
          # Set CRAN mirror to avoid repository errors
          options(repos = c(CRAN = "https://cloud.r-project.org/"))
          
          # Load package first to make its functions available
          devtools::load_all(".", quiet = FALSE)
          
          cat("Generating coverage for gwArsenic.R...\n")
          start_time <- Sys.time()
          
          # Generate coverage specifically for gwArsenic.R
          full_cov <- covr::package_coverage(
            path = "R/gwArsenic.R",
            test_files = "tests/testthat/test-gwArsenic.R",
            quiet = FALSE,
            clean = FALSE,
            type = "tests"
          )
          
          end_time <- Sys.time()
          cat("‚úÖ Coverage generation completed in",
              round(as.numeric(end_time - start_time, units = "secs"), 2),
              "seconds\n\n")
          
          # Calculate and print coverage percentage
          cov <- full_cov
          class(cov) <- class(full_cov)
          attr(cov, "package") <- attr(full_cov, "package")
          attr(cov, "relative") <- attr(full_cov, "relative")
                         
          # Create coverage directory
          dir.create("coverage", showWarnings = FALSE)
          
          # Generate HTML report for gwArsenic.R only
          cat("\n=== Generating gwArsenic.R Coverage Report ===\n")
          tryCatch({
            # Filter coverage to show only gwArsenic.R
            gwarsenic_only_cov <- Filter(function(x) {
              if (is.list(x) && !is.null(x$srcref)) {
                srcfile_name <- attr(x$srcref, "srcfile")$filename
                grepl("gwArsenic\\.R", basename(srcfile_name), ignore.case = TRUE)
              } else {
                FALSE
              }
            }, cov)
            
            # Recreate coverage object with proper class and attributes
            if (length(gwarsenic_only_cov) > 0) {
              class(gwarsenic_only_cov) <- class(cov)
              attr(gwarsenic_only_cov, "package") <- attr(cov, "package")
              attr(gwarsenic_only_cov, "relative") <- attr(cov, "relative")
              
              # Generate report with filtered coverage
              covr::report(gwarsenic_only_cov, file = "coverage/gwArsenic-coverage.html")
              cat("‚úÖ HTML coverage report generated for gwArsenic.R only\n")
            } else {
              cat("‚ö†Ô∏è No gwArsenic.R coverage found, generating full report\n")
              covr::report(cov, file = "coverage/gwArsenic-coverage.html")
            }
          }, error = function(e) {
            cat("‚ö†Ô∏è Warning: Could not generate HTML report:\n")
            print(e)
            cat("Trying fallback approach...\n")
            tryCatch({
              covr::report(cov, file = "coverage/gwArsenic-coverage.html")
              cat("‚úÖ Fallback HTML report generated\n")
            }, error = function(e2) {
              cat("‚ùå Could not generate any HTML report\n")
            })
          })
          
          # Create a focused summary file
          coverage_pct <- covr::percent_coverage(gwarsenic_only_cov)
          cat(sprintf("üìä gwArsenic.R Coverage: %.1f%%\n\n", coverage_pct))
          total_lines <- length(cov)
          uncovered_lines <- ceiling(
            total_lines - coverage_pct / 100 * total_lines
          )
          coverage_summary <- data.frame(
            File = "gwArsenic.R",
            Coverage = sprintf("%.1f%%", coverage_pct),
            Status = if (coverage_pct >= 85) {
              "‚úÖ EXCELLENT"
            } else if (coverage_pct >= 75) {
              "‚úÖ GOOD"
            } else if (coverage_pct >= 65) {
              "‚ö†Ô∏è NEEDS IMPROVEMENT"
            } else {
              "‚ùå INSUFFICIENT"
            },
            Target = "‚â•85%",
            Uncovered_Lines = uncovered_lines,
            Total_Lines = total_lines,
            stringsAsFactors = FALSE
          )
          cat("\n=== gwArsenic.R Coverage Summary ===\n")
          print(coverage_summary)
          write.csv(coverage_summary, "coverage/gwArsenic-coverage-summary.csv", row.names = FALSE)

          # Set quality gates
          cat("\n=== Quality Gate Assessment ===\n")
          if (coverage_pct < 65) {
            cat(sprintf("‚ùå FAIL: gwArsenic.R coverage %.1f%% is below minimum threshold (65%%)\n", coverage_pct))
            cat("üîß Recommendation: Add more comprehensive tests\n")
            quit(status = 1)
          } else if (coverage_pct < 75) {
            cat(sprintf("‚ö†Ô∏è WARNING: gwArsenic.R coverage %.1f%% is below recommended threshold (75%%)\n", coverage_pct))
            cat("üîß Recommendation: Consider adding tests for edge cases\n")
          } else {
            cat(sprintf("‚úÖ SUCCESS: gwArsenic.R coverage %.1f%% meets quality standards\n", coverage_pct))
          }
          
          # Additional recommendations
          if (coverage_pct < 85) {
            cat("\nüìù Suggestions to improve coverage:\n")
            cat("1. Add tests for error conditions and edge cases\n")
            cat("2. Test all branches of conditional statements\n")
            cat("3. Ensure all validation functions are tested\n")
            cat("4. Test both success and failure scenarios\n")
          }
          
          # Upload to codecov if token is available
          if (Sys.getenv("CODECOV_TOKEN") != "") {
            cat("\nUploading gwArsenic.R coverage to codecov...\n")
            covr::codecov(coverage = cov, flags = "gwArsenic")
          }
        shell: Rscript {0}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4  # Updated from v3
        with:
          name: gwArsenic-coverage-report
          path: coverage/gwArsenic-coverage.html
      
      - name: Generate coverage badge
        run: |          
          # Get coverage percentage from summary file
          summary <- read.csv("coverage/gwArsenic-coverage-summary.csv")
          coverage_pct <- as.numeric(gsub("%", "", summary$Coverage[1]))
          # Determine badge color
          if (coverage_pct >= 90) {
            color <- "brightgreen"
          } else if (coverage_pct >= 80) {
            color <- "green" 
          } else if (coverage_pct >= 70) {
            color <- "yellow"
          } else if (coverage_pct >= 60) {
            color <- "orange"
          } else {
            color <- "red"
          }
          
          # Create badge URL
          badge_url <- sprintf("https://img.shields.io/badge/coverage-%.1f%%25-%s.svg", 
                              coverage_pct, color)
          
          # Write to environment file for use in subsequent steps
          cat(sprintf("COVERAGE_BADGE=%s\n", badge_url), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          cat(sprintf("COVERAGE_PCT=%.1f\n", coverage_pct), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          
          cat(sprintf("Generated coverage badge: %s\n", badge_url))
        shell: Rscript {0}

      - name: Update README badge
        run: |
          # Update the coverage badge in README.md
          sed -i 's|!\[Test Coverage\](.*)|![Test Coverage](${{ env.COVERAGE_BADGE }})|' README.md
          
          # Commit changes if there are any
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Auto-update coverage badge to ${{ env.COVERAGE_PCT }}%" || exit 0
            git push
          fi

  # Enhanced documentation validation
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::roxygen2
            any::devtools
            any::pkgdown

      - name: Check documentation
        run: |          
          # Check that documentation is up to date
          cat("Generating documentation...\n")
          devtools::document()
          
          # Verify no uncommitted changes to documentation
          status_output <- system("git status --porcelain", intern = TRUE)
          if (length(status_output) > 0) {
            cat("Documentation is out of date. Please run devtools::document()\n")
            cat("Changed files:\n")
            system("git status")
            system("git diff")
            quit(status = 1)
          }
          
          cat("Documentation is up to date!\n")
        shell: Rscript {0}

  # pkgdown site generation
  pkgdown:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, docs]
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
  
      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: any::pkgdown
          needs: website
  
      - name: Build pkgdown site
        run: pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
        shell: Rscript {0}
  
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v4  # Updated to v4
        with:
          path: docs/
  
      - name: Deploy to GitHub pages
        id: deployment
        uses: actions/deploy-pages@v4