# GitHub Actions workflow for testing gwArsenicR package
# This workflow tests the package on multiple R versions and operating systems
# to ensure compatibility and reliability across different environments

name: R Package Testing - gwArsenicR

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:  # Skip CI for non-code changes
      - "**.md"
      - "**.txt"
      - "docs/**"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'release'}
          - {os: ubuntu-latest,  r: 'release'}
          - {os: ubuntu-latest,  r: 'devel'}
          - {os: ubuntu-latest,  r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Query R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2  # Enable caching for better performance
          extra-packages: |
            any::rcmdcheck
            any::testthat
            any::devtools
            any::remotes
          needs: check

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install package dependencies
        run: |
          # Install package dependencies
          remotes::install_deps(dependencies = TRUE, upgrade = "always")
          
          # Install additional testing dependencies
          install.packages(c("covr", "spelling"))
        shell: Rscript {0}

      - name: Check package build
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          error-on: '"error"'
          
      - name: Run comprehensive tests
        run: |
          # Set options for better error reporting
          options(warn = 2, error = traceback)
          
          # Load package and run all tests
          devtools::load_all()
          
          # Run tests with better error capture
          tryCatch({
            cat("Running test-gwArsenic.R specifically...\n")
            if (file.exists("tests/testthat/test-gwArsenic.R")) {
              testthat::test_file("tests/testthat/test-gwArsenic.R", reporter = "summary")
              cat("test-gwArsenic.R completed successfully!\n")
            } else {
              cat("Warning: test-gwArsenic.R not found, trying filter approach...\n")
              devtools::test(filter = "gwArsenic", reporter = "summary")
            }
            
            cat("Running full test suite...\n")
            devtools::test(reporter = "summary")
            
            cat("Testing package installation...\n")
            devtools::install(quiet = FALSE)
            library(gwArsenicR)
            
            # Test main function exists
            stopifnot(exists("perform_sensitivity_analysis"))
            cat("All tests completed successfully!\n")
          }, error = function(e) {
            cat("Test failed with error:\n")
            print(e)
            quit(status = 1)
          })
        shell: Rscript {0}

      - name: Test vignette rendering
        run: |
          # Test that vignettes can be built
          if (file.exists("vignettes/gwArsenicR-vignette.Rmd")) {
            cat("Testing vignette rendering...\n")
            tryCatch({
              rmarkdown::render("vignettes/gwArsenicR-vignette.Rmd", 
                              output_dir = tempdir())
              cat("Vignette rendered successfully!\n")
            }, error = function(e) {
              cat("Vignette rendering failed:\n")
              print(e)
              quit(status = 1)
            })
          }
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4  # Updated from v3
        with:
          name: check-results-${{ matrix.config.os }}-r${{ matrix.config.r }}
          path: check

      - name: Show session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

  # Enhanced coverage job with quality gates
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::covr
            any::testthat
            any::devtools
            any::DT
            any::htmltools
          needs: coverage

      - name: Test coverage
        run: |
          # Load package first
          devtools::load_all(".", quiet = FALSE)
          
          # Generate coverage ONLY for gwArsenic.R
          cat("Generating coverage for gwArsenic.R specifically...\n")
          
          # Find the gwArsenic.R file path
          gwarsenic_path <- file.path("R", "gwArsenic.R")
          
          if (!file.exists(gwarsenic_path)) {
            cat("ERROR: gwArsenic.R not found at expected path:", gwarsenic_path, "\n")
            cat("Available R files:\n")
            r_files <- list.files("R", pattern = "\\.R$", full.names = TRUE)
            print(r_files)
            quit(status = 1)
          }
          
          # Generate coverage for just gwArsenic.R
          cov <- covr::file_coverage(
            source_files = gwarsenic_path,
            test_files = "tests/testthat/test-gwArsenic.R"
          )
          
          # Print detailed coverage summary
          print(cov)
          coverage_pct <- covr::percent_coverage(cov)
          cat(sprintf("gwArsenic.R coverage: %.1f%%\n", coverage_pct))
          
          # Show detailed line-by-line coverage
          cat("\n=== gwArsenic.R Coverage Details ===\n")
          coverage_detail <- covr::tally_coverage(cov)
          print(coverage_detail)
          
          # Show uncovered lines specifically
          uncovered_lines <- covr::zero_coverage(cov)
          if (length(uncovered_lines) > 0) {
            cat("\nUncovered lines in gwArsenic.R:\n")
            for (line_info in uncovered_lines) {
              cat(sprintf("  Line %d: %s\n", line_info$line, trimws(line_info$value)))
            }
          } else {
            cat("\nAll lines in gwArsenic.R are covered!\n")
          }
          
          # Check coverage by function within gwArsenic.R
          cat("\n=== Function Coverage in gwArsenic.R ===\n")
          func_coverage <- covr::function_coverage(cov)
          
          if (length(func_coverage) > 0) {
            for (i in seq_along(func_coverage)) {
              func_name <- names(func_coverage)[i]
              func_pct <- covr::percent_coverage(func_coverage[[i]])
              status <- if (func_pct >= 80) "‚úÖ" else "‚ö†Ô∏è"
              cat(sprintf("%s %-30s: %.1f%%\n", status, func_name, func_pct))
            }
          } else {
            cat("No functions found in coverage analysis\n")
          }
          
          # Generate HTML report for gwArsenic.R only
          cat("\n=== Generating gwArsenic.R Coverage Report ===\n")
          covr::report(cov, file = "gwArsenic-coverage.html")
          
          # Create focused summary
          coverage_summary <- data.frame(
            File = "gwArsenic.R",
            Coverage = sprintf("%.1f%%", coverage_pct),
            Status = if(coverage_pct >= 85) "‚úÖ EXCELLENT" else if(coverage_pct >= 75) "‚úÖ GOOD" else if(coverage_pct >= 65) "‚ö†Ô∏è NEEDS IMPROVEMENT" else "‚ùå INSUFFICIENT",
            Target = "‚â•85%",
            Uncovered_Lines = length(uncovered_lines),
            stringsAsFactors = FALSE
          )
          
          cat("\n=== gwArsenic.R Coverage Summary ===\n")
          print(coverage_summary)
          
          # Write summary to file
          write.csv(coverage_summary, "gwArsenic-coverage-summary.csv", row.names = FALSE)
          
          # Create detailed summary with recommendations
          cat("\n=== Coverage Assessment ===\n")
          if (coverage_pct >= 85) {
            cat("üéâ EXCELLENT: gwArsenic.R has excellent test coverage!\n")
          } else if (coverage_pct >= 75) {
            cat("üëç GOOD: gwArsenic.R has good test coverage, but could be improved\n")
          } else if (coverage_pct >= 65) {
            cat("‚ö†Ô∏è NEEDS IMPROVEMENT: gwArsenic.R coverage is below recommended levels\n")
          } else {
            cat("‚ùå INSUFFICIENT: gwArsenic.R coverage is critically low\n")
          }
          
          # Recommendations based on coverage
          if (coverage_pct < 85) {
            cat("\nüìù Recommendations:\n")
            cat("1. Add tests for uncovered lines shown above\n")
            cat("2. Focus on testing edge cases and error conditions\n")
            cat("3. Ensure all validation functions are tested\n")
            cat("4. Test both success and failure scenarios\n")
          }
          
          # Set quality gates
          if (coverage_pct < 65) {
            cat(sprintf("\n‚ùå FAIL: gwArsenic.R coverage %.1f%% is below minimum threshold (65%%)\n", coverage_pct))
            cat("Please add more tests before merging.\n")
            quit(status = 1)
          } else if (coverage_pct < 75) {
            cat(sprintf("\n‚ö†Ô∏è WARNING: gwArsenic.R coverage %.1f%% is below recommended threshold (75%%)\n", coverage_pct))
            cat("Consider adding more tests to improve coverage.\n")
          } else {
            cat(sprintf("\n‚úÖ SUCCESS: gwArsenic.R coverage %.1f%% meets quality standards\n", coverage_pct))
          }
          
          # Upload to codecov with custom flags for gwArsenic.R
          if (Sys.getenv("CODECOV_TOKEN") != "") {
            cat("Uploading gwArsenic.R coverage to codecov...\n")
            covr::codecov(
              coverage = cov,
              flags = "gwArsenic"
            )
          }
        shell: Rscript {0}

      - name: Upload gwArsenic.R coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gwArsenic-coverage-report
          path: |
            gwArsenic-coverage.html
            gwArsenic-coverage-summary.csv

      - name: Comment gwArsenic.R coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('gwArsenic-coverage-summary.csv')) {
                const summary = fs.readFileSync('gwArsenic-coverage-summary.csv', 'utf8');
                const lines = summary.split('\n').filter(line => line.trim());
                
                if (lines.length >= 2) {
                  const data = lines[1].split(',');
                  const coverage = data[1];
                  const status = data[2];
                  const uncoveredLines = data[4];
                  
                  let statusEmoji = "üìä";
                  if (status.includes("EXCELLENT")) statusEmoji = "üéâ";
                  else if (status.includes("GOOD")) statusEmoji = "üëç";
                  else if (status.includes("IMPROVEMENT")) statusEmoji = "‚ö†Ô∏è";
                  else if (status.includes("INSUFFICIENT")) statusEmoji = "‚ùå";
                  
                  const comment = `## ${statusEmoji} gwArsenic.R Test Coverage Report
                  
                  | Metric | Value |
                  |--------|-------|
                  | **Coverage** | ${coverage} |
                  | **Status** | ${status} |
                  | **Target** | ‚â•85% |
                  | **Uncovered Lines** | ${uncoveredLines} |
                  
                  ### üéØ Quality Gates
                  - üü¢ **Excellent**: ‚â•85% coverage
                  - üü° **Good**: ‚â•75% coverage  
                  - üü† **Needs Improvement**: ‚â•65% coverage
                  - üî¥ **Insufficient**: <65% coverage (fails CI)
                  
                  ### üìà Focus Areas
                  Since **gwArsenic.R** contains the core analysis functions, high test coverage is critical for:
                  - Input validation (validate_inputs function)
                  - Main analysis workflow (perform_sensitivity_analysis)
                  - Error handling and edge cases
                  - Data processing and imputation steps
                  
                  üìä [View Detailed Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  `;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                } else {
                  throw new Error('Coverage summary format unexpected');
                }
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '‚ö†Ô∏è gwArsenic.R coverage report could not be generated. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
                });
              }
            } catch (error) {
              console.log('gwArsenic.R coverage comment error:', error);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ö†Ô∏è Could not process gwArsenic.R coverage results. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
              });
            }

  # Enhanced documentation validation
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::roxygen2
            any::devtools
            any::pkgdown

      - name: Check documentation
        run: |
          # Set git config for potential commits
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Check that documentation is up to date
          cat("Generating documentation...\n")
          devtools::document()
          
          # Verify no uncommitted changes to documentation
          status_output <- system("git status --porcelain", intern = TRUE)
          if (length(status_output) > 0) {
            cat("Documentation is out of date. Please run devtools::document()\n")
            cat("Changed files:\n")
            system("git status")
            system("git diff")
            quit(status = 1)
          }
          
          cat("Documentation is up to date!\n")
        shell: Rscript {0}

  # pkgdown site generation
  pkgdown:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, docs]
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
  
      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: any::pkgdown
          needs: website
  
      - name: Build pkgdown site
        run: pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
        shell: Rscript {0}
  
      - name: Deploy to GitHub pages
        uses: actions/deploy-pages@v4  # Updated from v2