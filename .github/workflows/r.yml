# GitHub Actions workflow for testing gwArsenicR package
# This workflow tests the package on multiple R versions and operating systems
# to ensure compatibility and reliability across different environments

name: R Package Testing - gwArsenicR

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:  # Skip CI for non-code changes
      - "**.md"
      - "**.txt"
      - "docs/**"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'release'}
          - {os: ubuntu-latest,  r: 'release'}
          - {os: ubuntu-latest,  r: 'devel'}
          - {os: ubuntu-latest,  r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Query R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2  # Enable caching for better performance
          extra-packages: |
            any::rcmdcheck
            any::testthat
            any::devtools
            any::remotes
          needs: check

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install package dependencies
        run: |
          # Install package dependencies
          remotes::install_deps(dependencies = TRUE, upgrade = "always")
          
          # Install additional testing dependencies
          install.packages(c("covr", "spelling"))
        shell: Rscript {0}

      - name: Check package build
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          error-on: '"error"'
          
      - name: Run comprehensive tests
        run: |
          # Set options for better error reporting
          options(warn = 2, error = traceback)
          
          # Load package and run all tests
          devtools::load_all()
          
          # Run tests with better error capture
          tryCatch({
            cat("Running test-gwArsenic.R specifically...\n")
            if (file.exists("tests/testthat/test-gwArsenic.R")) {
              testthat::test_file("tests/testthat/test-gwArsenic.R", reporter = "summary")
              cat("test-gwArsenic.R completed successfully!\n")
            } else {
              cat("Warning: test-gwArsenic.R not found, trying filter approach...\n")
              devtools::test(filter = "gwArsenic", reporter = "summary")
            }
            
            cat("Running full test suite...\n")
            devtools::test(reporter = "summary")
            
            cat("Testing package installation...\n")
            devtools::install(quiet = FALSE)
            library(gwArsenicR)
            
            # Test main function exists
            stopifnot(exists("perform_sensitivity_analysis"))
            cat("All tests completed successfully!\n")
          }, error = function(e) {
            cat("Test failed with error:\n")
            print(e)
            quit(status = 1)
          })
        shell: Rscript {0}

      - name: Test vignette rendering
        run: |
          # Test that vignettes can be built
          if (file.exists("vignettes/gwArsenicR-vignette.Rmd")) {
            cat("Testing vignette rendering...\n")
            tryCatch({
              rmarkdown::render("vignettes/gwArsenicR-vignette.Rmd", 
                              output_dir = tempdir())
              cat("Vignette rendered successfully!\n")
            }, error = function(e) {
              cat("Vignette rendering failed:\n")
              print(e)
              quit(status = 1)
            })
          }
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4  # Updated from v3
        with:
          name: check-results-${{ matrix.config.os }}-r${{ matrix.config.r }}
          path: check

      - name: Show session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

  # Enhanced coverage job with quality gates
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only on main branch
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::covr
            any::testthat
            any::devtools
            any::DT
            any::htmltools
          needs: coverage

      - name: Test coverage
        run: |
          # Generate coverage report with better settings
          cov <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package"),
            type = "all"  # Include all coverage types
          )
          
          # Print detailed coverage summary
          print(cov)
          coverage_pct <- covr::percent_coverage(cov)
          cat(sprintf("Total coverage: %.1f%%\n", coverage_pct))
          
          # Get specific coverage for gwArsenic.R
          file_coverage <- covr::file_coverage(cov)
          gwarsenic_coverage <- file_coverage[grepl("gwArsenic\\.R$", names(file_coverage))]
          
          if (length(gwarsenic_coverage) > 0) {
            gwarsenic_pct <- covr::percent_coverage(gwarsenic_coverage[[1]])
            cat(sprintf("gwArsenic.R coverage: %.1f%%\n", gwarsenic_pct))
            
            # Show detailed line-by-line coverage for gwArsenic.R
            cat("\n=== gwArsenic.R Coverage Details ===\n")
            gwarsenic_detail <- covr::tally_coverage(gwarsenic_coverage[[1]])
            print(gwarsenic_detail)
            
            # Check if gwArsenic.R meets coverage requirements
            if (gwarsenic_pct < 85) {
              cat(sprintf("WARNING: gwArsenic.R coverage %.1f%% is below recommended 85%%\n", gwarsenic_pct))
            } else {
              cat(sprintf("GOOD: gwArsenic.R coverage %.1f%% meets requirements\n", gwarsenic_pct))
            }
          } else {
            cat("WARNING: Could not find gwArsenic.R in coverage report\n")
            cat("Available files:\n")
            print(names(file_coverage))
          }
          
          # Show coverage by function for key functions
          cat("\n=== Function Coverage ===\n")
          func_coverage <- covr::function_coverage(cov)
          key_functions <- c("perform_sensitivity_analysis", "validate_inputs", "setup_analysis")
          
          for (func_name in key_functions) {
            func_cov <- func_coverage[grepl(func_name, names(func_coverage))]
            if (length(func_cov) > 0) {
              func_pct <- covr::percent_coverage(func_cov[[1]])
              cat(sprintf("%s: %.1f%%\n", func_name, func_pct))
            } else {
              cat(sprintf("%s: NOT FOUND\n", func_name))
            }
          }
          
          # Generate detailed HTML report
          cat("\n=== Generating Coverage Reports ===\n")
          covr::report(cov, file = "coverage-report.html")
          
          # Generate a summary file for gwArsenic.R specifically
          if (length(gwarsenic_coverage) > 0) {
            gwarsenic_report <- covr::report(gwarsenic_coverage[[1]], file = "gwArsenic-coverage.html")
          }
          
          # Create a coverage summary file
          coverage_summary <- data.frame(
            File = c("Total Package", "gwArsenic.R"),
            Coverage = c(
              sprintf("%.1f%%", coverage_pct),
              if(length(gwarsenic_coverage) > 0) sprintf("%.1f%%", gwarsenic_pct) else "N/A"
            ),
            Status = c(
              if(coverage_pct >= 80) "PASS" else "FAIL",
              if(length(gwarsenic_coverage) > 0 && gwarsenic_pct >= 85) "PASS" else "NEEDS IMPROVEMENT"
            ),
            stringsAsFactors = FALSE
          )
          
          cat("\n=== Coverage Summary ===\n")
          print(coverage_summary)
          
          # Write summary to file
          write.csv(coverage_summary, "coverage-summary.csv", row.names = FALSE)
          
          # Fail if overall coverage is too low
          if (coverage_pct < 80) {
            cat(sprintf("FAIL: Overall coverage %.1f%% is below minimum 80%%\n", coverage_pct))
            quit(status = 1)
          }
          
          # Warn if gwArsenic.R coverage is low (but don't fail)
          if (length(gwarsenic_coverage) > 0 && gwarsenic_pct < 85) {
            cat(sprintf("WARNING: gwArsenic.R coverage %.1f%% is below recommended 85%%\n", gwarsenic_pct))
          }

          cat(sprintf("SUCCESS: Overall coverage %.1f%% meets requirements\n", coverage_pct))

          # Upload to codecov if token available
          if (Sys.getenv("CODECOV_TOKEN") != "") {
            cat("Uploading to codecov...\n")
            covr::codecov(coverage = cov)
          }
        shell: Rscript {0}

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage-report.html
            gwArsenic-coverage.html
            coverage-summary.csv

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('coverage-summary.csv', 'utf8');
              const lines = summary.split('\n');
              const totalCov = lines[1].split(',')[1];
              const gwArsenicCov = lines[2].split(',')[1];
              
              const comment = `## Test Coverage Report
              
              | File | Coverage | Status |
              |------|----------|--------|
              | **Total Package** | ${totalCov} | ${lines[1].split(',')[2]} |
              | **gwArsenic.R** | ${gwArsenicCov} | ${lines[2].split(',')[2]} |
              
              ### Key Points:
              - **gwArsenic.R** is the main analysis file and should have high coverage
              - Target: Overall ≥80%, gwArsenic.R ≥85%
              - [Detailed Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post coverage comment:', error);
            }

  # Enhanced documentation validation
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: |
            any::roxygen2
            any::devtools
            any::pkgdown

      - name: Check documentation
        run: |
          # Set git config for potential commits
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Check that documentation is up to date
          cat("Generating documentation...\n")
          devtools::document()
          
          # Verify no uncommitted changes to documentation
          status_output <- system("git status --porcelain", intern = TRUE)
          if (length(status_output) > 0) {
            cat("Documentation is out of date. Please run devtools::document()\n")
            cat("Changed files:\n")
            system("git status")
            system("git diff")
            quit(status = 1)
          }
          
          cat("Documentation is up to date!\n")
        shell: Rscript {0}

  # pkgdown site generation
  pkgdown:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, docs]
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
  
      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          extra-packages: any::pkgdown
          needs: website
  
      - name: Build pkgdown site
        run: pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
        shell: Rscript {0}
  
      - name: Deploy to GitHub pages
        uses: actions/deploy-pages@v4  # Updated from v2